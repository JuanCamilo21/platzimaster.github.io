{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/0410-profundicemos-en-la-recursion/","result":{"data":{"site":{"siteMetadata":{"title":"Platzi Master"}},"markdownRemark":{"id":"6e247ca0-fd14-5aac-9339-9355268f0d4a","excerpt":"Tercera parte - nivel intermedio En el post anterior vimos como sumar, multiplicar y exponenciar de forma recursiva, vamos a seguir con más ejemplos. Más…","html":"<p><em>Tercera parte - nivel intermedio</em></p>\n<p>En el post anterior vimos como sumar, multiplicar y exponenciar de forma recursiva, vamos a seguir con más ejemplos.</p>\n<h2>Más ejemplos</h2>\n<p>Recordemos el factorial. Podemos definirlo de maner recursiva como:</p>\n<ol>\n<li><code class=\"language-text\">0! = 1</code>.</li>\n<li><code class=\"language-text\">s(n)! = s(n) * n!</code>.</li>\n</ol>\n<p>En ocasiones, para calcular el siguiente necesitamos usar dos anteriores, por ejemplo en la serie de fibonacci:</p>\n<ol>\n<li><code class=\"language-text\">fibonacci(1) = 1</code></li>\n<li><code class=\"language-text\">fibonacci(2) = 1</code></li>\n<li><code class=\"language-text\">fibonacci(s(s(n)))  = fibonacci(s(n)) + fibonacci(n)</code></li>\n</ol>\n<p>El código de estas dos ejemplos corresponde a los challenge-javascript-03 y challenge-javascript-04.</p>\n<p>Pero vamos a ver un caso de uso más abstracto.</p>\n<h2>Divide y vencerás</h2>\n<p>El término divide y vencerás es un paradigma de diseño de algoritmos que consiste a grandes rasgos en dividir el problema en dos o más problemas menores que se pueden solucionar de manera sencilla y después juntar las respuestas para obtener la respuesta final.</p>\n<p>¿Y cómo se relaciona con la recursividad?</p>\n<p>Bueno, pues los problemas chiquitos que sabemos resolver fácilmente son nuestra base, y los problemas mayores se pueden resolver sabiendo los problemas chiquitos, la definición recursiva.</p>\n<h2>Ordenación recursiva</h2>\n<p>Analicemos el problema de ordenar números. Supongamos que tenemos un arreglo desordenado de números, por ejemplo <code class=\"language-text\">[6, 5, 3, 1, 8, 7, 2, 4]</code>, y queremos ordenarlo de menor a mayor. Sabemos comparar dos números, y uno sólo también. Pues tratemos de reducir este problema hasta el que ya sabemos resolver.</p>\n<p>Podemos partir el problema en 2, <code class=\"language-text\">[6, 5, 3, 1]</code> y <code class=\"language-text\">[ 8, 7, 2, 4]</code>. Todavía no sabemos cómo ordenar estos nuevos problemas, algo parecido a cuando analizamos la definición recursiva del factorial. Entonces dividimos el problema nuevamente.</p>\n<p>Dividimos cada problema en 2, entonces tenemos los siguientes arreglos: <code class=\"language-text\">[6, 5]</code>, <code class=\"language-text\">[3,1]</code>, <code class=\"language-text\">[8,7]</code> y <code class=\"language-text\">[2, 4]</code>. Estos problemas ya los sabemos resolver. Si ordenamos los 4 arreglos tenemos <code class=\"language-text\">[5,6]</code> , <code class=\"language-text\">[1, 2]</code>, <code class=\"language-text\">[7, 8]</code>, <code class=\"language-text\">[2, 4]</code>.</p>\n<p>Ya los tenemos ordenados por pares, ahora veamos otro problema, como unir estas respuestas para ordenar nuestro problema mayor.</p>\n<p>Este algoritmo se llama mergesort porque primero divide el problema en dos y cuando tenga la respuesta, las une (merge) de forma ordenada (sort).</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif\" alt=\"Mergesort\"></p>\n<p>Una aproximación al código sería la siguiente:</p>\n<p>JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">const mergesort <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    const <span class=\"token punctuation\">[</span> array_left<span class=\"token punctuation\">,</span> array_right <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dividir<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    array_left <span class=\"token operator\">=</span> mergesort<span class=\"token punctuation\">(</span>array_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    array_right <span class=\"token operator\">=</span> mergesort<span class=\"token punctuation\">(</span>array_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>array_left<span class=\"token punctuation\">,</span> array_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> array\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    array_left<span class=\"token punctuation\">,</span> array_right <span class=\"token operator\">=</span> dividir<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n    array_left <span class=\"token operator\">=</span> mergesort<span class=\"token punctuation\">(</span>array_left<span class=\"token punctuation\">)</span>\n    array_right <span class=\"token operator\">=</span> mergesort<span class=\"token punctuation\">(</span>array_right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> merge<span class=\"token punctuation\">(</span>array_left<span class=\"token punctuation\">,</span> array_right<span class=\"token punctuation\">)</span></code></pre></div>\n<p>La recursividad se vé al llamarse a sí misma para ordenar el arreglo derecho y el izquierdo. Notemos que el caso base corresponde cuando tenemos un único elemento en el array, en lugar de dos. Esto es porque en nuestro ejemplo teníamos un número par de elementos en nuestro array, por lo que al dividir a la mitad, nos quedaron siempre parejas.</p>\n<p>Por último, la función <code class=\"language-text\">merge</code> junta los dos arreglos ordenados en un solo arreglo ya ordenado.</p>\n<p>Como ejercicio completa la función <code class=\"language-text\">mergesort</code>. Mándame un <a href=\"https://twitter.com/hyfi06\">tweet</a> con código y el resultado, o tus dudas, los estaré esperando ;)</p>\n<h2>Contacto</h2>\n<p>Si quieres hablar más sobre este tema contáctame en:</p>\n<ul>\n<li>Slack: @Héctor (hyfi06)</li>\n<li>Twitter: <a href=\"https://twitter.com/hyfi06\">@hyfi06</a></li>\n<li>Github: <a href=\"https://github.com/hyfi06\">hyfi06</a></li>\n<li>Platzi: <a href=\"https://platzi.com/@hyfi06/\">@hyfi06</a></li>\n</ul>","frontmatter":{"title":"Profundicemos en la recursión","date":"April 10, 2020","description":"Un vistazo al funcionamiento de la recursión y el algoritmo divide y vencerás. Tercera parte - nivel intermedio","author":"Héctor Olvera Vital","email":"hector.olvera@ciencias.unam.mx","platziUser":"hyfi06"}}},"pageContext":{"slug":"/2020/0410-profundicemos-en-la-recursion/","previous":{"fields":{"slug":"/2020/0407-la-base-de-la-recursion/"},"frontmatter":{"title":"La base de la Recursión"}},"next":{"fields":{"slug":"/2020/0411-Github-tips-tricks-hacks/"},"frontmatter":{"title":"Github: Tips, tricks y hacks"}}}}}