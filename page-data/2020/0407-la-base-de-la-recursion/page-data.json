{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/0407-la-base-de-la-recursion/","result":{"data":{"site":{"siteMetadata":{"title":"Platzi Master"}},"markdownRemark":{"id":"8ef57f1f-e3de-5ddd-93f4-2f22d225c896","excerpt":"Segunda parte - nivel intermedio Si vienes de alguna carrera afín a las matemáticas e ingeniería, seguramente habrás oído hablar de la inducción matemática…","html":"<p><em>Segunda parte - nivel intermedio</em></p>\n<p>Si vienes de alguna carrera afín a las matemáticas e ingeniería, seguramente habrás oído hablar de la inducción matemática. ¡Espera, no cierres el post todavía! Ya se que puede traer malos recuerdos, pero, por el momento, no vamos a hacer ninguna inducción matemática.</p>\n<p>La inducción matemáticas es un método (axioma) para demostrar propiedades de los números naturales. Posiblemente recordarás haber “demostrado” alguna cosa con sucesiones o series. Pero como dije, no va de esto este post. Sólo quiero rescatar los pasos que usa la inducción.</p>\n<p>Primero vemos que la propiedad se cumple para <code class=\"language-text\">0</code> (ó <code class=\"language-text\">1</code>, ó otro número, depende de lo que convenga).\nSuponemos que se cumple para un <code class=\"language-text\">n</code>.\nDemostramos que se cumple para <code class=\"language-text\">n + 1</code>.</p>\n<p>No importa si no te hace sentido eso, si quieres saber más puedes contactarme en los medios que aparecen al final de este post.</p>\n<p>La recursión, como se introdujo en el <a href=\"https://platzimaster.github.io/2020/0404-introduccion-a-la-recursion/\">post anterior de esta saga</a>, es algo que en su definición aparece lo que se está definiendo. Esto no lleva a contradicción cuando definimos un caso base antes del caso recursivo. Y esto es gracias a que la recursión se fundamenta en la inducción matemática.</p>\n<p>La inducción matemática parte de un caso base, que la propiedad se cumpla para el <code class=\"language-text\">0</code>; y un paso inductivo, suponer para <code class=\"language-text\">n</code> y demostrar que se cumple para <code class=\"language-text\">n + 1</code>. La recursión hace esto mismo, primero de define qué pasa con el <code class=\"language-text\">0</code>, o otro número que nos sirva de base; y luego definimos de manera recursiva el paso <code class=\"language-text\">n + 1</code> usando que tenemos el paso <code class=\"language-text\">n</code>.</p>\n<p><img src=\"https://images.emojiterra.com/google/android-pie/512px/1f92f.png\" alt=\"nuclear head\"></p>\n<p>Respira. Esto puede ser abrumador. Lo sé, es algo abstracto, pero para eso están los ejemplos.</p>\n<h2>Ejemplos de definiciones recursivas</h2>\n<p>Ya pasamos lo más difícil: decir las cosas como son. Ahora hay que comprenderlo.</p>\n<p>Vamos a definir las tablas de la suma de manera recursiva. Fácil, ¿no? Sólo requerimos saber cual es el número siguiente, lo denotaremos como <code class=\"language-text\">s(n)</code>, el sucesor de <code class=\"language-text\">n</code>.</p>\n<p>La tabla de sumar de k se define como sigue:</p>\n<p><code class=\"language-text\">k + (0) = k</code>\n<code class=\"language-text\">k + (s(n)) = s(k + (n))</code></p>\n<p>¿Cuánto es <code class=\"language-text\">2 + 2</code>? ¡Pues vamos a programarlo!</p>\n<p>JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sumar2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sumar2</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sumar2</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> sumar2<span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Si llamas la función <code class=\"language-text\">sumar2(2)</code> verás que te sale <code class=\"language-text\">16</code>. ¿Por qué? ¿No te salió <code class=\"language-text\">16</code>? ¿Te salio <code class=\"language-text\">4</code>? A mi también me salió <code class=\"language-text\">4</code>, pero quería asegurarme que lo hicieras.</p>\n<p>Veamos que hace la computadora:\nLlamamos <code class=\"language-text\">sumar2(2)</code>.\nComo <code class=\"language-text\">2 != 0</code>, regresamos <code class=\"language-text\">sumar2(1) + 1</code>. Pero para resolver la operación necesitamos saber cuanto vale <code class=\"language-text\">sumar2(1)</code>.\nLlamamos <code class=\"language-text\">sumar2(1)</code>.\nComo <code class=\"language-text\">1 != 0</code>, regresamos <code class=\"language-text\">sumar(0) + 1</code>. Pero para resolver la operación necesitamos saber cuánto vale <code class=\"language-text\">sumar2(0)</code>.\nLlamamos <code class=\"language-text\">sumar2(0)</code>.\nComo <code class=\"language-text\">0 = 0</code> regresamos <code class=\"language-text\">2</code>.\nEn el paso 4 ya podemos opera <code class=\"language-text\">sumar2(0) + 1 = 2 + 1 = 3</code>, regresamos <code class=\"language-text\">3</code>.\nEn el paso 2 ya podemos operar <code class=\"language-text\">sumar2(1) +1 = 3 + 1 = 4</code>, y regresamos <code class=\"language-text\">4</code>.</p>\n<p><img src=\"https://images.emojiterra.com/google/android-pie/512px/1f92f.png\" alt=\"nuclear head\"></p>\n<p>Este ejemplo es muy sencillo, como dije solo se requiere saber cual es el número siguiente. Aquí nos aprovechamos de que el número siguientes es <code class=\"language-text\">n+1</code>.</p>\n<p>Vamos a ver otros ejemplos. Pero si entendiste este, los demás son similares.</p>\n<p>Ya que sabemos sumar, vamos a multiplicar de manera recursiva.</p>\n<p><code class=\"language-text\">k * (0) = 0</code>\n<code class=\"language-text\">k * (s(n)) = k * n + k</code></p>\n<p>¿Cuánto es <code class=\"language-text\">7 * 6</code>? Pues si no lo recuerdas seguro sabes cuanto es <code class=\"language-text\">7 * 5</code> y sólo sumas <code class=\"language-text\">7</code> más. ¿No aplicaste este truco toda vida? Eso es recursividad. Lo has sabido hacer, los has entendido toda la vida, pero no sabías que se llamaba así.</p>\n<p>Vamos a programar la tabla del <code class=\"language-text\">7</code>:</p>\n<p>JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicar7</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token function\">multiplicar7</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">multiplicar7 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> num<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span>  multiplicar7<span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span></code></pre></div>\n<p>Como ejercicio repite los pasos que hace la computadora, como hice con la suma, cuando llamas <code class=\"language-text\">multiplicar7(3)</code>.</p>\n<p>Ya sabemos multiplicar, ¿y si ahora exponenciamos?</p>\n<p><code class=\"language-text\">k ^ 0 = 1</code>\n<code class=\"language-text\">k ^ s(n) = (k ^ n) * k</code></p>\n<p>Como ejercicio programa la función <code class=\"language-text\">exp2</code> y calcula <code class=\"language-text\">exp2(10)</code>. Mándame un <a href=\"https://twitter.com/hyfi06\">tweet</a> con tu código y el resultado, lo estaré esperando ;)</p>\n<h2>Contacto</h2>\n<p>Si quieres hablar más sobre este tema contáctame en:</p>\n<ul>\n<li>Slack: @Héctor (hyfi06)</li>\n<li>Twitter: <a href=\"https://twitter.com/hyfi06\">@hyfi06</a></li>\n<li>Github: <a href=\"https://github.com/hyfi06\">hyfi06</a></li>\n<li>Platzi: <a href=\"https://platzi.com/@hyfi06/\">@hyfi06</a></li>\n</ul>","frontmatter":{"title":"La base de la Recursión","date":"April 07, 2020","description":"Un vistazo al funcionamiento de la recursión. Segunda parte - nivel intermedio","author":"Héctor Olvera Vital","email":"hector.olvera@ciencias.unam.mx","platziUser":"hyfi06"}}},"pageContext":{"slug":"/2020/0407-la-base-de-la-recursion/","previous":{"fields":{"slug":"/2020/0406-computer-science-vs-software-engineer/"},"frontmatter":{"title":"Computer Science vs Software Engineer"}},"next":{"fields":{"slug":"/2020/0411-Github-tips-tricks-hacks/"},"frontmatter":{"title":"Github: Tips, tricks y hacks"}}}}}