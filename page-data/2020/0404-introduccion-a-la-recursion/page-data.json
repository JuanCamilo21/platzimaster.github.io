{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/0404-introduccion-a-la-recursion/","result":{"data":{"site":{"siteMetadata":{"title":"Platzi Master"}},"markdownRemark":{"id":"c7e222b0-670b-5786-9960-496a84022ef9","excerpt":"Primera parte - nivel básico Spoiler alert: El siguiente post contiene una solución al challenge-javascript-03. Si no lo has resuelto, intententalo primero…","html":"<p><em>Primera parte - nivel básico</em></p>\n<p><strong>Spoiler alert:</strong> El siguiente post contiene una solución al <a href=\"https://github.com/PlatziMaster/challenge-javascript-03\">challenge-javascript-03</a>. Si no lo has resuelto, intententalo primero antes de leer este post.</p>\n<blockquote>\n<p>Lo primero para entender la recursividad, es entender la recursividad.</p>\n</blockquote>\n<p>La recursión o la recursividad hace referencia a algo que se llama a sí mismo, por ejemplo, en un diccionario podrías encontrar lo siguiente:</p>\n<blockquote>\n<p>Recursión, véase Recursión.</p>\n</blockquote>\n<p>También se dice que algo es recursivo cuando lo que se está definido, está en la definición. Aunque, esto parezca un error hay forma de poder usarlo si que se llegue a una ambigüedad como en el ejemplo del diccionario.</p>\n<h2>Una ejemplo en matemáticas</h2>\n<p>La operación factorial se define como <code class=\"language-text\">n! = n * (n - 1) * (n - 2) * … * 2 * 1</code>, es decir, la multiplicación de todos los números naturales positivos menores o iguales a n.</p>\n<p>Otra forma de definir esta operación es de manera recursiva, es decir, que usando el factorial en la propia definición.</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\">0! = 1\nsi n > 0, n! = n * (n - 1)!</code></pre></div>\n<p>Notemos que en esta definición tenemos dos casos. El caso <code class=\"language-text\">0! = 1</code> se le llama caso base, y el caso recursivo <code class=\"language-text\">n! = n * (n - 1)!</code>. Estos tiene que ver con la matemática que llevan detrás la recursividad, la cual se introducirá en un post más adelante.</p>\n<h2>Vamos al código</h2>\n<p>Vamos a implementar en código la definición recursiva de la operación factorial. </p>\n<p>En javascript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> num <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">factorial <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> num<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> num <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Entendamos el código</h2>\n<p>Cuando nosotros llamamos a la función factorial, pasan los siguientes paso:</p>\n<p>Llamamos <code class=\"language-text\">factorial(3)</code>.\nComo <code class=\"language-text\">3 != 0</code>, <code class=\"language-text\">factorial(3) = 3 * factorial(3 -1) = 3 * factorial(2)</code>, pero no podemos hacer la multiplicación por que no conocemos factorial(2).\nLlamamos  <code class=\"language-text\">factorial(2)</code>.\nComo <code class=\"language-text\">2 != 0</code>, <code class=\"language-text\">factorial(2) = 2 * factorial(2 -1) = 2 * factorial(1)</code>, pero no podemos hacer la multiplicación por que no conocemos factorial(1).\nLlamamos  <code class=\"language-text\">factorial(1)</code>.\nComo <code class=\"language-text\">1 != 0</code>, <code class=\"language-text\">factorial(1) = 1 * factorial(1 -1) = 1 * factorial(0)</code>, pero no podemos hacer la multiplicación por que no conocemos factorial(0).\nLlamamos  <code class=\"language-text\">factorial(1)</code>.\nComo <code class=\"language-text\">0 == 0</code>, <code class=\"language-text\">factorial(0) = 1</code>, y por lo que retornamos <code class=\"language-text\">1</code>.\nYa podemos terminar la operación del paso 6, por lo que, <code class=\"language-text\">factorial(1) = 1 * factorial(0) = 1 * 1 = 1</code>, y retornamos <code class=\"language-text\">1</code>.\nYa podemos terminar la operación del paso 4, por lo que, <code class=\"language-text\">factorial(2) = 2 * factorial(1) = 2 * 1 = 2</code>, y retornamos <code class=\"language-text\">2</code>.\nYa podemos terminar la operación del paso 2, por lo que, <code class=\"language-text\">factorial(3) = 3 * factorial(2) = 3 * 2 = 6</code>, y retornamos <code class=\"language-text\">6</code>.</p>\n<p>Así, <code class=\"language-text\">factorial(3) = 6</code>.</p>\n<p>Aquí podemos ver la importancia del caso base. Si no tuviéramos un caso base caeríamos en un ciclo infinito.</p>\n<p><img src=\"https://media1.giphy.com/media/aaODAv1iuQdgI/source.gif\" alt=\"Recusive Winnie the Pooh\"></p>\n<h2>Reto</h2>\n<p>Reescribe la función factorial que se presentó aquí, para que imprima en consola el valor obtenido justo antes de retornarlo. En la consola deberás ver que empieza a retornar los valores en el orden que del paso 8 a 11.</p>\n<h2>Contacto</h2>\n<p>Si quieres hablar más sobre este tema contáctame en:</p>\n<ul>\n<li>Slack: @Héctor (hyfi06)</li>\n<li>Twitter: <a href=\"https://twitter.com/hyfi06\">@hyfi06</a></li>\n<li>Github: <a href=\"https://github.com/hyfi06\">hyfi06</a></li>\n</ul>","frontmatter":{"title":"Introducción a la recursión","date":"April 04, 2020","description":"Una intrudución a la recursión. Primera parte - nivel básico. Spoiler alert: Puede contener la solución a un challenge","author":"Héctor Olvera Vital","email":"hector.olvera@ciencias.unam.mx","platziUser":"hyfi06"}}},"pageContext":{"slug":"/2020/0404-introduccion-a-la-recursion/","previous":{"fields":{"slug":"/2020/0331-la-tecnica-pomodoro-y-otros-tips-para-s/"},"frontmatter":{"title":"La tecnica Pomodoro y otros tips para ser mas productivo"}},"next":{"fields":{"slug":"/2020/0406-computer-science-vs-software-engineer/"},"frontmatter":{"title":"Computer Science vs Software Engineer"}}}}}